# database/db.py

import secrets
import string
from config import INITIAL_CREDITS, AVAILABLE_MODELS, REFERRAL_CODE_LENGTH, AVAILABLE_VOICES

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î. –ö–∞–∂–¥–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 'supabase' –∫–ª–∏–µ–Ω—Ç –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---

DEFAULT_MODEL = list(AVAILABLE_MODELS.values())[0]
DEFAULT_VOICE = list(AVAILABLE_VOICES.values())[0]

def generate_referral_code(user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    random_part = ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(REFERRAL_CODE_LENGTH))
    return f"ref{user_id}_{random_part}"

async def add_or_update_user(supabase, user_id, invited_by=None, language_code=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≥–æ–ª–æ—Å–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç."""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = await get_user_data(supabase, user_id)
        if existing_user:
            return existing_user
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        from translations import detect_user_language
        interface_language = detect_user_language(language_code) if language_code else 'en'
        
        # –ù–û–í–û–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —è–∑—ã–∫ —Ç–∞–∫–∏–º –∂–µ –∫–∞–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        voice_language = interface_language  # ru/en/pl
        
        print(f"üåç –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å={interface_language}, –≥–æ–ª–æ—Å–æ–≤–æ–π={voice_language}")
            
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referral_code = generate_referral_code(user_id)
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
        max_attempts = 5
        for _ in range(max_attempts):
            existing_code = await get_user_by_referral_code(supabase, referral_code)
            if not existing_code:
                break
            referral_code = generate_referral_code(user_id)
        
        user_data = {
            "user_id": user_id, 
            "credits": INITIAL_CREDITS, 
            "model": DEFAULT_MODEL,
            "referral_code": referral_code,
            "selected_voice": DEFAULT_VOICE,
            "voice_enabled": False,
            "voice_language": voice_language,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–π —è–∑—ã–∫
            "interface_language": interface_language,
            "streaming_enabled": True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º streaming
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        if invited_by:
            user_data["invited_by"] = invited_by
            
        await supabase.table("users").insert(user_data).execute()
        return await get_user_data(supabase, user_id)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return None

async def get_user_data(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–∞—è –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ streaming."""
    try:
        response = await supabase.table("users").select(
            "state, mode, credits, model, referral_code, invited_by, created_at, "
            "voice_enabled, selected_voice, voice_language, voice_messages_sent, voice_messages_received, "
            "interface_language, streaming_enabled"
        ).eq("user_id", user_id).execute()
        if response.data:
            return response.data[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    return None

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –Ø–ó–´–ö–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê ---

async def get_user_language(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        response = await supabase.table("users").select("interface_language").eq("user_id", user_id).execute()
        if response.data:
            return response.data[0].get('interface_language', 'en')
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    return 'en'

async def set_user_language(supabase, user_id, language_code):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    allowed_languages = ['ru', 'en', 'pl']
    if language_code in allowed_languages:
        try:
            await supabase.table("users").update({"interface_language": language_code}).eq("user_id", user_id).execute()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è {user_id}: {e}")
    return False

async def set_user_language_with_voice_sync(supabase, user_id, language_code):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —è–∑—ã–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
    """
    allowed_languages = ['ru', 'en', 'pl']
    if language_code in allowed_languages:
        try:
            # –û–ë–ù–û–í–õ–ï–ù–û: –í—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —è–∑—ã–∫ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–º
            voice_language = language_code  # ru->ru, en->en, pl->pl
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–∞ —è–∑—ã–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            await supabase.table("users").update({
                "interface_language": language_code,
                "voice_language": voice_language
            }).eq("user_id", user_id).execute()
            
            print(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å={language_code}, –≥–æ–ª–æ—Å–æ–≤–æ–π={voice_language} (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–æ–≤ –¥–ª—è {user_id}: {e}")
    return False

async def sync_voice_language_with_interface(supabase, user_id):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —è–∑—ã–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º —è–∑—ã–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    –¢–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞: ru->ru, en->en, pl->pl
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        interface_language = await get_user_language(supabase, user_id)
        
        # –£–ü–†–û–©–ï–ù–û: –ì–æ–ª–æ—Å–æ–≤–æ–π —è–∑—ã–∫ = –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–º—É —è–∑—ã–∫—É
        voice_language = interface_language  # ru->ru, en->en, pl->pl
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è
        await supabase.table("users").update({
            "voice_language": voice_language
        }).eq("user_id", user_id).execute()
        
        print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è {user_id}: {interface_language} -> {voice_language}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ –¥–ª—è {user_id}: {e}")
        return False

async def set_user_referral(supabase, user_id, inviter_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await supabase.table("users").update({"invited_by": inviter_id}).eq("user_id", user_id).execute()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –¥–ª—è {user_id}: {e}")
        return False

async def get_user_voice_settings(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        response = await supabase.table("users").select(
            "voice_enabled, selected_voice, voice_language"
        ).eq("user_id", user_id).execute()
        if response.data:
            return response.data[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ {user_id}: {e}")
    return {"voice_enabled": False, "selected_voice": DEFAULT_VOICE, "voice_language": "ru"}

async def set_voice_enabled(supabase, user_id, enabled):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await supabase.table("users").update({"voice_enabled": enabled}).eq("user_id", user_id).execute()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ voice_enabled –¥–ª—è {user_id}: {e}")
        return False

async def set_user_voice(supabase, user_id, voice_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if voice_id in AVAILABLE_VOICES.values():
        try:
            await supabase.table("users").update({"selected_voice": voice_id}).eq("user_id", user_id).execute()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ–ª–æ—Å–∞ –¥–ª—è {user_id}: {e}")
    return False

async def set_user_voice_language(supabase, user_id, language):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —è–∑—ã–∫–∞)."""
    allowed_languages = ['ru', 'en', 'pl']  # –¢–æ–ª—å–∫–æ 3 —è–∑—ã–∫–∞
    if language in allowed_languages:
        try:
            await supabase.table("users").update({"voice_language": language}).eq("user_id", user_id).execute()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞ –≥–æ–ª–æ—Å–∞ –¥–ª—è {user_id}: {e}")
    return False

async def increment_voice_stats(supabase, user_id, message_type):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        current_data = await get_user_data(supabase, user_id)
        if not current_data:
            return
            
        if message_type == "sent":
            current_count = current_data.get("voice_messages_sent", 0)
            await supabase.table("users").update({
                "voice_messages_sent": current_count + 1
            }).eq("user_id", user_id).execute()
        elif message_type == "received":
            current_count = current_data.get("voice_messages_received", 0)
            await supabase.table("users").update({
                "voice_messages_received": current_count + 1
            }).eq("user_id", user_id).execute()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è {user_id}: {e}")

async def get_voice_stats(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    try:
        response = await supabase.table("users").select(
            "voice_messages_sent, voice_messages_received"
        ).eq("user_id", user_id).execute()
        if response.data:
            data = response.data[0]
            return {
                "sent": data.get("voice_messages_sent", 0),
                "received": data.get("voice_messages_received", 0)
            }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–ª—è {user_id}: {e}")
    return {"sent": 0, "received": 0}

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø STREAMING RESPONSE ---

async def get_user_streaming_setting(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É streaming –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        response = await supabase.table("users").select("streaming_enabled").eq("user_id", user_id).execute()
        if response.data:
            return response.data[0].get('streaming_enabled', True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ streaming –¥–ª—è {user_id}: {e}")
    return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω

async def set_user_streaming(supabase, user_id, enabled):
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç streaming response –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await supabase.table("users").update({"streaming_enabled": enabled}).eq("user_id", user_id).execute()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ streaming –¥–ª—è {user_id}: {e}")
        return False

# --- –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def get_user_by_referral_code(supabase, referral_code):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É."""
    try:
        response = await supabase.table("users").select(
            "user_id, referral_code"
        ).eq("referral_code", referral_code).execute()
        if response.data:
            return response.data[0]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É {referral_code}: {e}")
    return None

async def award_referral_bonuses(supabase, inviter_id, new_user_id, inviter_bonus, new_user_bonus):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    try:
        await add_user_credits(supabase, inviter_id, inviter_bonus)
        await add_user_credits(supabase, new_user_id, new_user_bonus)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤: {e}")
        return False

async def get_user_credits(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    data = await get_user_data(supabase, user_id)
    return data['credits'] if data else 0

async def deduct_user_credits(supabase, user_id, amount):
    """–°–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    current_credits = await get_user_credits(supabase, user_id)
    new_credits = max(0, current_credits - amount)
    try:
        await supabase.table("users").update({"credits": new_credits}).eq("user_id", user_id).execute()
        return new_credits
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É {user_id}: {e}")
    return current_credits

async def add_user_credits(supabase, user_id, amount):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    current_credits = await get_user_credits(supabase, user_id)
    new_credits = current_credits + amount
    try:
        await supabase.table("users").update({"credits": new_credits}).eq("user_id", user_id).execute()
        return new_credits
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ {user_id}: {e}")
    return current_credits

async def remove_user_credits(supabase, user_id, amount, allow_negative=False):
    """–°–Ω–∏–º–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        supabase: –∫–ª–∏–µ–Ω—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)
        allow_negative: —Ä–∞–∑—Ä–µ—à–∏—Ç—å —É—Ö–æ–¥ –≤ –º–∏–Ω—É—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False)
    
    Returns:
        tuple: (–Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å, —É—Å–ø–µ—à–Ω–æ_–ª–∏_–æ–ø–µ—Ä–∞—Ü–∏—è)
    """
    current_credits = await get_user_credits(supabase, user_id)
    
    if not allow_negative and current_credits < amount:
        # –ù–µ –º–æ–∂–µ–º —Å–Ω—è—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å
        return current_credits, False
    
    new_credits = current_credits - amount
    
    try:
        await supabase.table("users").update({"credits": new_credits}).eq("user_id", user_id).execute()
        return new_credits, True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É {user_id}: {e}")
        return current_credits, False

async def get_all_user_ids(supabase):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        response = await supabase.table("users").select("user_id").execute()
        return [item['user_id'] for item in response.data]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return []

async def count_users(supabase):
    """–°—á–∏—Ç–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        response = await supabase.table("users").select("user_id", count='exact').execute()
        return response.count
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    return 0

async def get_referral_stats(supabase, user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        response = await supabase.table("users").select("user_id", count='exact').eq("invited_by", user_id).execute()
        invited_count = response.count or 0
        return {"invited_count": invited_count}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {user_id}: {e}")
    return {"invited_count": 0}

async def set_user_state(supabase, user_id, state):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await supabase.table("users").update({"state": state}).eq("user_id", user_id).execute()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è {user_id}: {e}")

async def set_user_mode(supabase, user_id, mode):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é."""
    try:
        await supabase.table("users").update({"mode": mode, "state": 'chat'}).eq("user_id", user_id).execute()
        await clear_user_history(supabase, user_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–∂–∏–º–∞ –¥–ª—è {user_id}: {e}")

async def set_user_model(supabase, user_id, model_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if model_id in AVAILABLE_MODELS.values():
        try:
            await supabase.table("users").update({"model": model_id}).eq("user_id", user_id).execute()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏ –¥–ª—è {user_id}: {e}")

async def get_user_history(supabase, user_id, limit=10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        response = await supabase.table("messages").select("role, content").eq("user_id", user_id).order("created_at", desc=True).limit(limit).execute()
        return list(reversed(response.data))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {user_id}: {e}")
    return []

async def add_message_to_history(supabase, user_id, role, content):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é."""
    try:
        await supabase.table("messages").insert({"user_id": user_id, "role": role, "content": content}).execute()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è {user_id}: {e}")

async def clear_user_history(supabase, user_id):
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        await supabase.table("messages").delete().eq("user_id", user_id).execute()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {user_id}: {e}")