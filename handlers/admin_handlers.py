# handlers/admin_handlers.py

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from functools import wraps
import asyncio
from config import ADMIN_USER_IDS
from database import db
from translations import get_text

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º supabase
def register_handlers(application, supabase):

    def admin_only(func):
        @wraps(func)
        async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            if user_id not in ADMIN_USER_IDS:
                # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—à–∏–±–∫–∏
                user_language = await db.get_user_language(supabase, user_id)
                error_message = get_text(user_language, 'command_admin_only')
                await update.message.reply_text(error_message)
                return
            return await func(update, context, *args, **kwargs)
        return wrapped

    @admin_only
    async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_language = await db.get_user_language(supabase, user_id)
        
        welcome_message = get_text(user_language, 'admin_welcome')
        await update.message.reply_text(welcome_message, parse_mode='Markdown')

    @admin_only
    async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_language = await db.get_user_language(supabase, user_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_count = await db.count_users(supabase)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            all_users = await db.get_all_user_ids(supabase)
            
            total_credits = 0
            voice_enabled_count = 0
            negative_balance_count = 0
            
            for user_id_stat in all_users:
                user_data = await db.get_user_data(supabase, user_id_stat)
                if user_data:
                    credits = user_data.get('credits', 0)
                    total_credits += credits
                    
                    if credits < 0:
                        negative_balance_count += 1
                    
                    if user_data.get('voice_enabled', False):
                        voice_enabled_count += 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
            avg_credits = round(total_credits / user_count, 2) if user_count > 0 else 0
            voice_percentage = round(voice_enabled_count/user_count*100, 1) if user_count > 0 else 0
            
            if user_language == 'ru':
                stats_message = (
                    f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
                    f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{user_count}**\n"
                    f"‚Ä¢ –° –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏: **{voice_enabled_count}**\n"
                    f"‚Ä¢ –° –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: **{negative_balance_count}**\n\n"
                    f"üí∞ **–ö—Ä–µ–¥–∏—Ç—ã:**\n"
                    f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∫—Ä–µ–¥–∏—Ç–æ–≤: **{total_credits}**\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: **{avg_credits}** –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                    f"üéôÔ∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                    f"‚Ä¢ –í–∫–ª—é—á–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: **{voice_enabled_count}** –∏–∑ {user_count} ({voice_percentage}%)"
                )
                
                if negative_balance_count > 0:
                    stats_message += f"\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** {negative_balance_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º!"
            elif user_language == 'pl':
                stats_message = (
                    f"üìä **Statystyki bota**\n\n"
                    f"üë• **U≈ºytkownicy:**\n"
                    f"‚Ä¢ Wszyscy u≈ºytkownicy: **{user_count}**\n"
                    f"‚Ä¢ Z odpowiedziami g≈Çosowymi: **{voice_enabled_count}**\n"
                    f"‚Ä¢ Z ujemnym saldem: **{negative_balance_count}**\n\n"
                    f"üí∞ **Kredyty:**\n"
                    f"‚Ä¢ ≈ÅƒÖczne kredyty: **{total_credits}**\n"
                    f"‚Ä¢ ≈örednie saldo: **{avg_credits}** kredyt√≥w\n\n"
                    f"üéôÔ∏è **Wiadomo≈õci g≈Çosowe:**\n"
                    f"‚Ä¢ W≈ÇƒÖczy≈Ço odpowiedzi g≈Çosowe: **{voice_enabled_count}** z {user_count} ({voice_percentage}%)"
                )
                
                if negative_balance_count > 0:
                    stats_message += f"\n\n‚ö†Ô∏è **Uwaga:** {negative_balance_count} u≈ºytkownik√≥w z ujemnym saldem!"
            else:  # English
                stats_message = (
                    f"üìä **Bot Statistics**\n\n"
                    f"üë• **Users:**\n"
                    f"‚Ä¢ Total users: **{user_count}**\n"
                    f"‚Ä¢ With voice responses: **{voice_enabled_count}**\n"
                    f"‚Ä¢ With negative balance: **{negative_balance_count}**\n\n"
                    f"üí∞ **Credits:**\n"
                    f"‚Ä¢ Total credits: **{total_credits}**\n"
                    f"‚Ä¢ Average balance: **{avg_credits}** credits\n\n"
                    f"üéôÔ∏è **Voice messages:**\n"
                    f"‚Ä¢ Enabled voice responses: **{voice_enabled_count}** of {user_count} ({voice_percentage}%)"
                )
                
                if negative_balance_count > 0:
                    stats_message += f"\n\n‚ö†Ô∏è **Warning:** {negative_balance_count} users with negative balance!"
            
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            
        except Exception as e:
            if user_language == 'ru':
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
            elif user_language == 'pl':
                error_msg = f"‚ùå B≈ÇƒÖd podczas pobierania statystyk: {e}"
            else:
                error_msg = f"‚ùå Error getting statistics: {e}"
            await update.message.reply_text(error_msg)

    @admin_only
    async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_language = await db.get_user_language(supabase, user_id)
        
        message_to_send = " ".join(context.args)
        if not message_to_send:
            error_message = get_text(user_language, 'admin_broadcast_no_message')
            await update.message.reply_text(error_message)
            return
            
        user_ids = await db.get_all_user_ids(supabase)
        start_message = get_text(user_language, 'admin_broadcast_start', count=len(user_ids))
        await update.message.reply_text(start_message)
        
        success_count, fail_count = 0, 0
        for target_user_id in user_ids:
            try:
                await context.bot.send_message(chat_id=target_user_id, text=message_to_send)
                success_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                fail_count += 1
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {target_user_id}: {e}")
                
        complete_message = get_text(user_language, 'admin_broadcast_complete', success=success_count, failed=fail_count)
        await update.message.reply_text(complete_message)

    @admin_only
    async def add_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_language = await db.get_user_language(supabase, user_id)
        
        try:
            if len(context.args) < 2:
                error_message = get_text(
                    user_language, 'admin_command_format_error',
                    command='/add_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>' if user_language == 'ru' else '/add_credits <user_id> <ilo≈õƒá>' if user_language == 'pl' else '/add_credits <user_id> <amount>',
                    example='/add_credits 123456789 10'
                )
                await update.message.reply_text(error_message, parse_mode='Markdown')
                return
                
            target_user_id = int(context.args[0])
            amount = int(context.args[1])
            
            if amount <= 0:
                error_message = get_text(user_language, 'admin_credits_positive')
                await update.message.reply_text(error_message)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_balance = await db.get_user_credits(supabase, target_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data = await db.get_user_data(supabase, target_user_id)
            if not user_data:
                error_message = get_text(user_language, 'admin_user_not_found', user_id=target_user_id)
                await update.message.reply_text(error_message)
                return
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            new_balance = await db.add_user_credits(supabase, target_user_id, amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = get_text(
                user_language, 'admin_credits_added_success',
                user_id=target_user_id, amount=amount,
                old_balance=current_balance, new_balance=new_balance
            )
            
            await update.message.reply_text(admin_message, parse_mode='Markdown')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
            try:
                target_user_language = await db.get_user_language(supabase, target_user_id)
                user_message = get_text(
                    target_user_language, 'admin_user_notified_credits_added',
                    amount=amount, balance=new_balance
                )
                
                await context.bot.send_message(chat_id=target_user_id, text=user_message, parse_mode='Markdown')
                
            except Exception as e:
                notification_failed = get_text(user_language, 'admin_notification_failed', error=e)
                await update.message.reply_text(notification_failed)
                
        except (IndexError, ValueError):
            error_message = get_text(
                user_language, 'admin_command_format_error',
                command='/add_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>' if user_language == 'ru' else '/add_credits <user_id> <ilo≈õƒá>' if user_language == 'pl' else '/add_credits <user_id> <amount>',
                example='/add_credits 123456789 10'
            )
            await update.message.reply_text(error_message, parse_mode='Markdown')
        except Exception as e:
            if user_language == 'ru':
                error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
            elif user_language == 'pl':
                error_msg = f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd: {e}"
            else:
                error_msg = f"‚ùå An error occurred: {e}"
            await update.message.reply_text(error_msg)

    @admin_only
    async def remove_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_language = await db.get_user_language(supabase, user_id)
        
        try:
            if len(context.args) < 2:
                if user_language == 'ru':
                    command_text = '/remove_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>'
                    examples_text = "**–ü—Ä–∏–º–µ—Ä—ã:**\n‚Ä¢ `/remove_credits 123456789 5` - —Å–Ω—è—Ç—å 5 –∫—Ä–µ–¥–∏—Ç–æ–≤\n‚Ä¢ `/remove_credits 123456789 10 force` - —Å–Ω—è—Ç—å 10 –∫—Ä–µ–¥–∏—Ç–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ —É–π–¥–µ—Ç –≤ –º–∏–Ω—É—Å)"
                elif user_language == 'pl':
                    command_text = '/remove_credits <user_id> <ilo≈õƒá>'
                    examples_text = "**Przyk≈Çady:**\n‚Ä¢ `/remove_credits 123456789 5` - usu≈Ñ 5 kredyt√≥w\n‚Ä¢ `/remove_credits 123456789 10 force` - usu≈Ñ 10 kredyt√≥w (nawet je≈õli spadnie poni≈ºej zera)"
                else:
                    command_text = '/remove_credits <user_id> <amount>'
                    examples_text = "**Examples:**\n‚Ä¢ `/remove_credits 123456789 5` - remove 5 credits\n‚Ä¢ `/remove_credits 123456789 10 force` - remove 10 credits (even if goes negative)"
                
                error_message = get_text(
                    user_language, 'admin_command_format_error',
                    command=command_text, example=examples_text
                )
                await update.message.reply_text(error_message, parse_mode='Markdown')
                return
                
            target_user_id = int(context.args[0])
            amount = int(context.args[1])
            
            if amount <= 0:
                error_message = get_text(user_language, 'admin_credits_positive')
                await update.message.reply_text(error_message)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ "force" –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å
            allow_negative = len(context.args) > 2 and context.args[2].lower() == "force"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_balance = await db.get_user_credits(supabase, target_user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data = await db.get_user_data(supabase, target_user_id)
            if not user_data:
                error_message = get_text(user_language, 'admin_user_not_found', user_id=target_user_id)
                await update.message.reply_text(error_message)
                return
            
            # –°–Ω–∏–º–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            new_balance, success = await db.remove_user_credits(supabase, target_user_id, amount, allow_negative)
            
            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                admin_message = get_text(
                    user_language, 'admin_credits_removed_success',
                    user_id=target_user_id, amount=amount,
                    old_balance=current_balance, new_balance=new_balance
                )
                
                if new_balance < 0:
                    admin_message += f"\n\n{get_text(user_language, 'admin_balance_negative_warning')}"
                
                await update.message.reply_text(admin_message, parse_mode='Markdown')
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–Ω—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
                try:
                    target_user_language = await db.get_user_language(supabase, target_user_id)
                    user_message = get_text(
                        target_user_language, 'admin_user_notified_credits_removed',
                        amount=amount, balance=new_balance
                    )
                    
                    if new_balance < 0:
                        user_message += f"\n\n{get_text(target_user_language, 'admin_user_balance_negative')}"
                    
                    await context.bot.send_message(chat_id=target_user_id, text=user_message, parse_mode='Markdown')
                    
                except Exception as e:
                    notification_failed = get_text(user_language, 'admin_notification_failed', error=e)
                    await update.message.reply_text(notification_failed)
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
                failed_message = get_text(
                    user_language, 'admin_credits_remove_failed',
                    user_id=target_user_id, current=current_balance, amount=amount,
                    command='/remove_credits'
                )
                await update.message.reply_text(failed_message, parse_mode='Markdown')
                
        except (IndexError, ValueError):
            if user_language == 'ru':
                command_text = '/remove_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [force]'
                examples_text = "**–ü—Ä–∏–º–µ—Ä—ã:**\n‚Ä¢ `/remove_credits 123456789 5`\n‚Ä¢ `/remove_credits 123456789 10 force`"
            elif user_language == 'pl':
                command_text = '/remove_credits <user_id> <ilo≈õƒá> [force]'
                examples_text = "**Przyk≈Çady:**\n‚Ä¢ `/remove_credits 123456789 5`\n‚Ä¢ `/remove_credits 123456789 10 force`"
            else:
                command_text = '/remove_credits <user_id> <amount> [force]'
                examples_text = "**Examples:**\n‚Ä¢ `/remove_credits 123456789 5`\n‚Ä¢ `/remove_credits 123456789 10 force`"
            
            error_message = get_text(
                user_language, 'admin_command_format_error',
                command=command_text, example=examples_text
            )
            await update.message.reply_text(error_message, parse_mode='Markdown')
        except Exception as e:
            if user_language == 'ru':
                error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
            elif user_language == 'pl':
                error_msg = f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd: {e}"
            else:
                error_msg = f"‚ùå An error occurred: {e}"
            await update.message.reply_text(error_msg)

    @admin_only
    async def user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_language = await db.get_user_language(supabase, user_id)
        
        try:
            if len(context.args) < 1:
                error_message = get_text(
                    user_language, 'admin_command_format_error',
                    command='/user_info <user_id>',
                    example='/user_info 123456789'
                )
                await update.message.reply_text(error_message, parse_mode='Markdown')
                return
                
            target_user_id = int(context.args[0])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await db.get_user_data(supabase, target_user_id)
            
            if not user_data:
                error_message = get_text(user_language, 'admin_user_not_found', user_id=target_user_id)
                await update.message.reply_text(error_message, parse_mode='Markdown')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            referral_stats = await db.get_referral_stats(supabase, target_user_id)
            voice_stats = await db.get_voice_stats(supabase, target_user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            credits = user_data.get('credits', 0)
            mode = user_data.get('mode', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            model = user_data.get('model', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            state = user_data.get('state', 'chat')
            created_at = user_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            interface_language = user_data.get('interface_language', 'en')
            
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            voice_enabled = user_data.get('voice_enabled', False)
            selected_voice = user_data.get('selected_voice', 'alloy')
            voice_language = user_data.get('voice_language', 'ru')
            
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            referral_code = user_data.get('referral_code', '–ù–µ—Ç')
            invited_by = user_data.get('invited_by', '–ù–µ—Ç')
            invited_count = referral_stats.get('invited_count', 0)
            
            if user_language == 'ru':
                user_info_message = (
                    f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
                    f"**üÜî ID:** `{target_user_id}`\n"
                    f"**üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {created_at}\n"
                    f"**‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ:** {state}\n"
                    f"**üåç –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:** {interface_language.upper()}\n\n"
                    f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                )
                
                if credits < 0:
                    user_info_message += " ‚ö†Ô∏è"
                
                user_info_message += (
                    f"\n\nü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI:**\n"
                    f"‚Ä¢ –†–µ–∂–∏–º: {mode}\n"
                    f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model}\n\n"
                    f"üéôÔ∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                    f"‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if voice_enabled else '–ù–µ—Ç'}\n"
                    f"‚Ä¢ –ì–æ–ª–æ—Å: {selected_voice}\n"
                    f"‚Ä¢ –Ø–∑—ã–∫: {voice_language.upper()}\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {voice_stats['sent']}\n"
                    f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {voice_stats['received']}\n\n"
                    f"üîó **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**\n"
                    f"‚Ä¢ –ö–æ–¥: `{referral_code}`\n"
                    f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {invited_by if invited_by != '–ù–µ—Ç' else '–°–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è'}\n"
                    f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {invited_count}"
                )
            elif user_language == 'pl':
                user_info_message = (
                    f"üë§ **Informacje o u≈ºytkowniku**\n\n"
                    f"**üÜî ID:** `{target_user_id}`\n"
                    f"**üìÖ Rejestracja:** {created_at}\n"
                    f"**‚ö° Stan:** {state}\n"
                    f"**üåç Jƒôzyk interfejsu:** {interface_language.upper()}\n\n"
                    f"üí∞ **Saldo:** {credits} kredyt√≥w"
                )
                
                if credits < 0:
                    user_info_message += " ‚ö†Ô∏è"
                
                user_info_message += (
                    f"\n\nü§ñ **Ustawienia AI:**\n"
                    f"‚Ä¢ Tryb: {mode}\n"
                    f"‚Ä¢ Model: {model}\n\n"
                    f"üéôÔ∏è **Wiadomo≈õci g≈Çosowe:**\n"
                    f"‚Ä¢ W≈ÇƒÖczone: {'Tak' if voice_enabled else 'Nie'}\n"
                    f"‚Ä¢ G≈Ços: {selected_voice}\n"
                    f"‚Ä¢ Jƒôzyk: {voice_language.upper()}\n"
                    f"‚Ä¢ Wys≈Çane: {voice_stats['sent']}\n"
                    f"‚Ä¢ Otrzymane: {voice_stats['received']}\n\n"
                    f"üîó **Program referencyjny:**\n"
                    f"‚Ä¢ Kod: `{referral_code}`\n"
                    f"‚Ä¢ Zaproszony przez: {invited_by if invited_by != '–ù–µ—Ç' else 'Sam siƒô zarejestrowa≈Ç'}\n"
                    f"‚Ä¢ Zaproszeni znajomi: {invited_count}"
                )
            else:  # English
                user_info_message = (
                    f"üë§ **User Information**\n\n"
                    f"**üÜî ID:** `{target_user_id}`\n"
                    f"**üìÖ Registration:** {created_at}\n"
                    f"**‚ö° State:** {state}\n"
                    f"**üåç Interface language:** {interface_language.upper()}\n\n"
                    f"üí∞ **Balance:** {credits} credits"
                )
                
                if credits < 0:
                    user_info_message += " ‚ö†Ô∏è"
                
                user_info_message += (
                    f"\n\nü§ñ **AI Settings:**\n"
                    f"‚Ä¢ Mode: {mode}\n"
                    f"‚Ä¢ Model: {model}\n\n"
                    f"üéôÔ∏è **Voice Messages:**\n"
                    f"‚Ä¢ Enabled: {'Yes' if voice_enabled else 'No'}\n"
                    f"‚Ä¢ Voice: {selected_voice}\n"
                    f"‚Ä¢ Language: {voice_language.upper()}\n"
                    f"‚Ä¢ Sent: {voice_stats['sent']}\n"
                    f"‚Ä¢ Received: {voice_stats['received']}\n\n"
                    f"üîó **Referral Program:**\n"
                    f"‚Ä¢ Code: `{referral_code}`\n"
                    f"‚Ä¢ Invited by: {invited_by if invited_by != '–ù–µ—Ç' else 'Self-registered'}\n"
                    f"‚Ä¢ Friends invited: {invited_count}"
                )
            
            await update.message.reply_text(user_info_message, parse_mode='Markdown')
            
        except (IndexError, ValueError):
            error_message = get_text(
                user_language, 'admin_command_format_error',
                command='/user_info <user_id>',
                example='/user_info 123456789'
            )
            await update.message.reply_text(error_message, parse_mode='Markdown')
        except Exception as e:
            if user_language == 'ru':
                error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
            elif user_language == 'pl':
                error_msg = f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd: {e}"
            else:
                error_msg = f"‚ùå An error occurred: {e}"
            await update.message.reply_text(error_msg)

    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("add_credits", add_credits_command))
    application.add_handler(CommandHandler("remove_credits", remove_credits_command))
    application.add_handler(CommandHandler("user_info", user_info_command))