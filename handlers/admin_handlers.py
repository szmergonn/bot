# handlers/admin_handlers.py

from telegram import Update
from telegram.ext import ContextTypes, CommandHandler
from functools import wraps
import asyncio
from config import ADMIN_USER_IDS
from database import db

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º supabase
def register_handlers(application, supabase):

    def admin_only(func):
        @wraps(func)
        async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            if user_id not in ADMIN_USER_IDS:
                await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            return await func(update, context, *args, **kwargs)
        return wrapped

    @admin_only
    async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üëë **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!**\n\n"
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞\n"
            "/user\\_info <user\\_id> - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n\n"
            "üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞–º–∏:**\n"
            "/add\\_credits <user\\_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –ù–∞—á–∏—Å–ª–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n"
            "/remove\\_credits <user\\_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> - –°–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã\n\n"
            "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞:**\n"
            "/broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            parse_mode='Markdown'
        )

    @admin_only
    async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            user_count = await db.count_users(supabase)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            all_users = await db.get_all_user_ids(supabase)
            
            total_credits = 0
            voice_enabled_count = 0
            negative_balance_count = 0
            
            for user_id in all_users:
                user_data = await db.get_user_data(supabase, user_id)
                if user_data:
                    credits = user_data.get('credits', 0)
                    total_credits += credits
                    
                    if credits < 0:
                        negative_balance_count += 1
                    
                    if user_data.get('voice_enabled', False):
                        voice_enabled_count += 1
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å
            avg_credits = round(total_credits / user_count, 2) if user_count > 0 else 0
            
            stats_message = (
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
                f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{user_count}**\n"
                f"‚Ä¢ –° –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏: **{voice_enabled_count}**\n"
                f"‚Ä¢ –° –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: **{negative_balance_count}**\n\n"
                f"üí∞ **–ö—Ä–µ–¥–∏—Ç—ã:**\n"
                f"‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –∫—Ä–µ–¥–∏—Ç–æ–≤: **{total_credits}**\n"
                f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å: **{avg_credits}** –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                f"üéôÔ∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                f"‚Ä¢ –í–∫–ª—é—á–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã: **{voice_enabled_count}** –∏–∑ {user_count} ({round(voice_enabled_count/user_count*100, 1) if user_count > 0 else 0}%)"
            )
            
            if negative_balance_count > 0:
                stats_message += f"\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** {negative_balance_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º!"
            
            await update.message.reply_text(stats_message, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    @admin_only
    async def broadcast_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        message_to_send = " ".join(context.args)
        if not message_to_send:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç!")
            return
        user_ids = await db.get_all_user_ids(supabase)
        await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        success_count, fail_count = 0, 0
        for user_id in user_ids:
            try:
                await context.bot.send_message(chat_id=user_id, text=message_to_send)
                success_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                fail_count += 1
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {success_count}, –û—à–∏–±–æ–∫: {fail_count}")

    @admin_only
    async def add_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `/add_credits 123456789 10`",
                    parse_mode='Markdown'
                )
                return
                
            user_id = int(context.args[0])
            amount = int(context.args[1])
            
            if amount <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_balance = await db.get_user_credits(supabase, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data = await db.get_user_data(supabase, user_id)
            if not user_data:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            new_balance = await db.add_user_credits(supabase, user_id, amount)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
            admin_message = (
                f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã!**\n\n"
                f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{user_id}`\n"
                f"‚ûï **–ù–∞—á–∏—Å–ª–µ–Ω–æ:** {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"üí∞ **–ë—ã–ª–æ:** {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                f"üí∞ **–°—Ç–∞–ª–æ:** {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
            
            await update.message.reply_text(admin_message, parse_mode='Markdown')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
            try:
                user_message = (
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                    f"–í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{amount} –∫—Ä–µ–¥–∏—Ç–æ–≤** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                    f"üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                )
                
                await context.bot.send_message(chat_id=user_id, text=user_message, parse_mode='Markdown')
                
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –ö—Ä–µ–¥–∏—Ç—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                
        except (IndexError, ValueError):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/add_credits 123456789 10`",
                parse_mode='Markdown'
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @admin_only
    async def remove_credits_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) < 2:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                    "‚Ä¢ `/remove_credits 123456789 5` - —Å–Ω—è—Ç—å 5 –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    "‚Ä¢ `/remove_credits 123456789 10 force` - —Å–Ω—è—Ç—å 10 –∫—Ä–µ–¥–∏—Ç–æ–≤ (–¥–∞–∂–µ –µ—Å–ª–∏ —É–π–¥–µ—Ç –≤ –º–∏–Ω—É—Å)",
                    parse_mode='Markdown'
                )
                return
                
            user_id = int(context.args[0])
            amount = int(context.args[1])
            
            if amount <= 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–ª–∞–≥ "force" –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —É—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Å
            allow_negative = len(context.args) > 2 and context.args[2].lower() == "force"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_balance = await db.get_user_credits(supabase, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_data = await db.get_user_data(supabase, user_id)
            if not user_data:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return
            
            # –°–Ω–∏–º–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
            new_balance, success = await db.remove_user_credits(supabase, user_id, amount, allow_negative)
            
            if success:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                admin_message = (
                    f"‚úÖ **–ö—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç—ã!**\n\n"
                    f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{user_id}`\n"
                    f"‚ûñ **–°–Ω—è—Ç–æ:** {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    f"üí∞ **–ë—ã–ª–æ:** {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    f"üí∞ **–°—Ç–∞–ª–æ:** {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                )
                
                if new_balance < 0:
                    admin_message += f"\n\n‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—à–µ–ª –≤ –º–∏–Ω—É—Å!"
                
                await update.message.reply_text(admin_message, parse_mode='Markdown')
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–Ω—è—Ç–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
                try:
                    user_message = (
                        f"üìâ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞**\n\n"
                        f"–° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±—ã–ª–æ —Å–Ω—è—Ç–æ **{amount} –∫—Ä–µ–¥–∏—Ç–æ–≤** –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                        f"üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                    )
                    
                    if new_balance < 0:
                        user_message += f"\n\n‚ö†Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å —É—à–µ–ª –≤ –º–∏–Ω—É—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    
                    await context.bot.send_message(chat_id=user_id, text=user_message, parse_mode='Markdown')
                    
                except Exception as e:
                    await update.message.reply_text(f"‚ö†Ô∏è –ö—Ä–µ–¥–∏—Ç—ã —Å–Ω—è—Ç—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            else:
                # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã
                await update.message.reply_text(
                    f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã**\n\n"
                    f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{user_id}`\n"
                    f"üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
                    f"‚ûñ **–ü–æ–ø—ã—Ç–∫–∞ —Å–Ω—è—Ç—å:** {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
                    f"üí° **–ü—Ä–∏—á–∏–Ω–∞:** –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `force` –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è:\n"
                    f"`/remove_credits {user_id} {amount} force`",
                    parse_mode='Markdown'
                )
                
        except (IndexError, ValueError):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_credits <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [force]`\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/remove_credits 123456789 5`\n"
                "‚Ä¢ `/remove_credits 123456789 10 force`",
                parse_mode='Markdown'
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    @admin_only
    async def user_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if len(context.args) < 1:
                await update.message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/user_info <user_id>`\n\n"
                    "**–ü—Ä–∏–º–µ—Ä:** `/user_info 123456789`",
                    parse_mode='Markdown'
                )
                return
                
            user_id = int(context.args[0])
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await db.get_user_data(supabase, user_id)
            
            if not user_data:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID `{user_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            referral_stats = await db.get_referral_stats(supabase, user_id)
            voice_stats = await db.get_voice_stats(supabase, user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            credits = user_data.get('credits', 0)
            mode = user_data.get('mode', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            model = user_data.get('model', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            state = user_data.get('state', 'chat')
            created_at = user_data.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            voice_enabled = user_data.get('voice_enabled', False)
            selected_voice = user_data.get('selected_voice', 'alloy')
            voice_language = user_data.get('voice_language', 'ru')
            
            # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            referral_code = user_data.get('referral_code', '–ù–µ—Ç')
            invited_by = user_data.get('invited_by', '–ù–µ—Ç')
            invited_count = referral_stats.get('invited_count', 0)
            
            user_info_message = (
                f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
                f"**üÜî ID:** `{user_id}`\n"
                f"**üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {created_at}\n"
                f"**‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ:** {state}\n\n"
                f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
            
            if credits < 0:
                user_info_message += " ‚ö†Ô∏è"
            
            user_info_message += (
                f"\n\nü§ñ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI:**\n"
                f"‚Ä¢ –†–µ–∂–∏–º: {mode}\n"
                f"‚Ä¢ –ú–æ–¥–µ–ª—å: {model}\n\n"
                f"üéôÔ∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                f"‚Ä¢ –í–∫–ª—é—á–µ–Ω—ã: {'–î–∞' if voice_enabled else '–ù–µ—Ç'}\n"
                f"‚Ä¢ –ì–æ–ª–æ—Å: {selected_voice}\n"
                f"‚Ä¢ –Ø–∑—ã–∫: {voice_language.upper()}\n"
                f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {voice_stats['sent']}\n"
                f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {voice_stats['received']}\n\n"
                f"üîó **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**\n"
                f"‚Ä¢ –ö–æ–¥: `{referral_code}`\n"
                f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: {invited_by if invited_by != '–ù–µ—Ç' else '–°–∞–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è'}\n"
                f"‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {invited_count}"
            )
            
            await update.message.reply_text(user_info_message, parse_mode='Markdown')
            
        except (IndexError, ValueError):
            await update.message.reply_text(
                "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/user_info <user_id>`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/user_info 123456789`",
                parse_mode='Markdown'
            )
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("broadcast", broadcast_command))
    application.add_handler(CommandHandler("add_credits", add_credits_command))
    application.add_handler(CommandHandler("remove_credits", remove_credits_command))
    application.add_handler(CommandHandler("user_info", user_info_command))