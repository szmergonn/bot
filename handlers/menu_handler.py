# handlers/menu_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from config import CHAT_MODES, AVAILABLE_MODELS
from database import db

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–ª–∏–µ–Ω—Ç supabase
def register_handlers(application, supabase):

    def build_main_menu():
        buttons = [
            [InlineKeyboardButton("üó£Ô∏è –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è", callback_data="submenu_modes")],
            [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="submenu_models")],
            [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_generate")]
        ]
        return InlineKeyboardMarkup(buttons)

    def build_modes_menu():
        mode_buttons = [[InlineKeyboardButton(mode, callback_data=f"mode_{mode}")] for mode in CHAT_MODES.keys()]
        mode_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return InlineKeyboardMarkup(mode_buttons)

    def build_model_menu():
        buttons = [[InlineKeyboardButton(name, callback_data=f"model_{model_id}")] for name, model_id in AVAILABLE_MODELS.items()]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return InlineKeyboardMarkup(buttons)
    
    async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu())

    async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat_id
        
        if query.data == "main_menu":
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu())
        elif query.data == "submenu_modes":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=build_modes_menu())
        elif query.data == "submenu_models":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=build_model_menu())
        elif query.data.startswith("mode_"):
            mode_name = query.data.split("_")[1]
            await db.set_user_mode(supabase, chat_id, mode_name)
            await query.edit_message_text(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{mode_name}*. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", parse_mode='Markdown', reply_markup=build_main_menu())
        elif query.data.startswith("model_"):
            model_id = query.data.split("model_")[1]
            await db.set_user_model(supabase, chat_id, model_id)
            model_name = next((name for name, mid in AVAILABLE_MODELS.items() if mid == model_id), model_id)
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{model_name}*. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", parse_mode='Markdown', reply_markup=build_main_menu())
        elif query.data == "image_generate":
            await db.set_user_state(supabase, chat_id, "awaiting_image_prompt")
            await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏.")

    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(button_handler))