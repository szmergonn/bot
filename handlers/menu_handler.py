# handlers/menu_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from config import CHAT_MODES, AVAILABLE_MODELS, AVAILABLE_VOICES, AVAILABLE_LANGUAGES, VOICE_TO_TEXT_COST, TEXT_TO_VOICE_COST
from database import db

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–ª–∏–µ–Ω—Ç supabase
def register_handlers(application, supabase):

    def build_main_menu():
        buttons = [
            [InlineKeyboardButton("üó£Ô∏è –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è", callback_data="submenu_modes")],
            [InlineKeyboardButton("üß† –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", callback_data="submenu_models")],
            [InlineKeyboardButton("üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="voice_settings")],
            [InlineKeyboardButton("üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="image_generate")]
        ]
        return InlineKeyboardMarkup(buttons)

    def build_modes_menu():
        mode_buttons = [[InlineKeyboardButton(mode, callback_data=f"mode_{mode}")] for mode in CHAT_MODES.keys()]
        mode_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return InlineKeyboardMarkup(mode_buttons)

    def build_model_menu():
        buttons = [[InlineKeyboardButton(name, callback_data=f"model_{model_id}")] for name, model_id in AVAILABLE_MODELS.items()]
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        return InlineKeyboardMarkup(buttons)
    
    async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu())

    async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        chat_id = query.message.chat_id
        user_id = query.from_user.id
        
        if query.data == "main_menu":
            await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=build_main_menu())
            
        elif query.data == "submenu_modes":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=build_modes_menu())
            
        elif query.data == "submenu_models":
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=build_model_menu())
            
        elif query.data.startswith("mode_"):
            mode_name = query.data.split("_")[1]
            await db.set_user_mode(supabase, chat_id, mode_name)
            await query.edit_message_text(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: *{mode_name}*. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", parse_mode='Markdown', reply_markup=build_main_menu())
            
        elif query.data.startswith("model_"):
            model_id = query.data.split("model_")[1]
            await db.set_user_model(supabase, chat_id, model_id)
            model_name = next((name for name, mid in AVAILABLE_MODELS.items() if mid == model_id), model_id)
            await query.edit_message_text(f"–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{model_name}*. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", parse_mode='Markdown', reply_markup=build_main_menu())
            
        elif query.data == "image_generate":
            await db.set_user_state(supabase, chat_id, "awaiting_image_prompt")
            await query.edit_message_text(text="–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏.")
            
        # --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
        elif query.data == "voice_settings":
            await show_voice_settings(query, supabase, user_id)
            
        elif query.data == "voice_toggle":
            await toggle_voice_mode(query, supabase, user_id)
            
        elif query.data == "voice_select":
            await show_voice_selection(query)
            
        elif query.data == "voice_language":
            await show_language_selection(query)
            
        elif query.data.startswith("voice_set_"):
            voice_id = query.data.replace("voice_set_", "")
            await set_user_voice(query, supabase, user_id, voice_id)
            
        elif query.data.startswith("voice_lang_"):
            language_code = query.data.replace("voice_lang_", "")
            await set_user_language(query, supabase, user_id, language_code)
            
        elif query.data == "voice_settings_back":
            await show_voice_settings(query, supabase, user_id)

    # --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ì–û–õ–û–°–û–í–´–ú–ò –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò ---

    async def show_voice_settings(query, supabase, user_id):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        voice_settings = await db.get_user_voice_settings(supabase, user_id)
        voice_stats = await db.get_voice_stats(supabase, user_id)
        
        # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
        current_voice_name = "–ù–µ –Ω–∞–π–¥–µ–Ω"
        for name, voice_id in AVAILABLE_VOICES.items():
            if voice_id == voice_settings.get('selected_voice'):
                current_voice_name = name
                break
        
        # –ù–∞–π–¥–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        current_language_name = "–ù–µ –Ω–∞–π–¥–µ–Ω"
        for name, lang_code in AVAILABLE_LANGUAGES.items():
            if lang_code == voice_settings.get('voice_language', 'ru'):
                current_language_name = name
                break
        
        status = "üîä –í–∫–ª—é—á–µ–Ω—ã" if voice_settings.get('voice_enabled') else "üîá –í—ã–∫–ª—é—á–µ–Ω—ã"
        
        settings_text = (
            f"üéôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
            f"**–¢–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å:** {current_voice_name}\n"
            f"**–Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:** {current_language_name}\n\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö: {voice_stats['sent']}\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã—Ö: {voice_stats['received']}\n\n"
            f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:**\n"
            f"‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {VOICE_TO_TEXT_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            f"‚Ä¢ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç: {TEXT_TO_VOICE_COST} –∫—Ä–µ–¥–∏—Ç–æ–≤\n\n"
            f"‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!"
        )
        
        keyboard = [
            [InlineKeyboardButton(
                "üîä –í–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã" if not voice_settings.get('voice_enabled') else "üîá –í—ã–∫–ª—é—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã", 
                callback_data="voice_toggle"
            )],
            [InlineKeyboardButton("üé≠ –°–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", callback_data="voice_select")],
            [InlineKeyboardButton("üåç –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data="voice_language")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            settings_text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def toggle_voice_mode(query, supabase, user_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –≥–æ–ª–æ—Å–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤."""
        voice_settings = await db.get_user_voice_settings(supabase, user_id)
        new_status = not voice_settings.get('voice_enabled', False)
        
        success = await db.set_voice_enabled(supabase, user_id, new_status)
        
        if success:
            status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
            await query.edit_message_text(
                f"‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã {status_text}!\n\n"
                f"{'üîä –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–º –Ω–∞ –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.' if new_status else 'üí¨ –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º –Ω–∞ –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.'}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="voice_settings_back")
                ]])
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="voice_settings_back")
                ]])
            )

    async def show_voice_selection(query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞."""
        buttons = []
        for voice_name, voice_id in AVAILABLE_VOICES.items():
            buttons.append([InlineKeyboardButton(
                voice_name, 
                callback_data=f"voice_set_{voice_id}"
            )])
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="voice_settings_back")])
        
        await query.edit_message_text(
            "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤:**\n\n"
            "üé≠ **Alloy** - –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å\n"
            "üîä **Echo** - –ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å\n"
            "üìñ **Fable** - –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π –∞–∫—Ü–µ–Ω—Ç\n"
            "üíé **Onyx** - –ì–ª—É–±–æ–∫–∏–π –º—É–∂—Å–∫–æ–π\n"
            "‚ú® **Nova** - –ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å\n"
            "üåü **Shimmer** - –ú—è–≥–∫–∏–π –∂–µ–Ω—Å–∫–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    async def set_user_voice(query, supabase, user_id, voice_id):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å."""
        success = await db.set_user_voice(supabase, user_id, voice_id)
        
        if success:
            voice_name = next((name for name, vid in AVAILABLE_VOICES.items() if vid == voice_id), voice_id)
            await query.edit_message_text(
                f"‚úÖ **–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: {voice_name}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å –≤ –æ—Ç–≤–µ—Ç–µ!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="voice_settings_back")
                ]])
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥–æ–ª–æ—Å–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="voice_settings_back")
                ]])
            )

    async def show_language_selection(query):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."""
        buttons = []
        for language_name, language_code in AVAILABLE_LANGUAGES.items():
            buttons.append([InlineKeyboardButton(
                language_name, 
                callback_data=f"voice_lang_{language_code}"
            )])
        
        buttons.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="voice_settings_back")])
        
        await query.edit_message_text(
            "üåç **–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n"
            "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –±–æ—Ç—É —Ç–æ—á–Ω–µ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤–∞—à—É —Ä–µ—á—å:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(buttons)
        )

    async def set_user_language(query, supabase, user_id, language_code):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."""
        success = await db.set_user_voice_language(supabase, user_id, language_code)
        
        if success:
            language_name = next((name for name, code in AVAILABLE_LANGUAGES.items() if code == language_code), language_code)
            await query.edit_message_text(
                f"‚úÖ **–Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω!**\n\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {language_name}\n\n"
                f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="voice_settings_back")
                ]])
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="voice_settings_back")
                ]])
            )

    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CallbackQueryHandler(button_handler))