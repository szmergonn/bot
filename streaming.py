# streaming.py

import asyncio
import time
from telegram import Update
from telegram.ext import ContextTypes
from telegram.error import RetryAfter, BadRequest
from translations import get_text

class StreamingResponse:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç AI."""
    
    def __init__(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_language: str):
        self.update = update
        self.context = context
        self.user_language = user_language
        self.current_message = None
        self.buffer = ""
        self.last_update_time = 0
        self.update_interval = 1.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.final_message = ""
        
    async def start_streaming(self, initial_text: str = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç."""
        try:
            if initial_text is None:
                initial_text = get_text(self.user_language, 'streaming_thinking', default="ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
            
            self.current_message = await self.update.message.reply_text(initial_text)
            self.last_update_time = time.time()
            print(f"üé¨ –ù–∞—á–∞—Ç streaming –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.update.effective_user.id}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ streaming: {e}")
            return False
    
    async def update_message(self, new_chunk: str, force_update: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤—ã–º –∫—É—Å–∫–æ–º —Ç–µ–∫—Å—Ç–∞."""
        if not self.current_message:
            return False
            
        self.buffer += new_chunk
        current_time = time.time()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        if force_update or (current_time - self.last_update_time) >= self.update_interval:
            await self._safe_update_message(self.buffer)
            self.last_update_time = current_time
            
    async def finalize_message(self, final_text: str = None, add_credits_info: bool = True, credits_cost: int = 1):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
        if final_text:
            self.final_message = final_text
        else:
            self.final_message = self.buffer
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
        if add_credits_info and credits_cost > 0:
            credits_text = get_text(
                self.user_language, 'streaming_credits_deducted', 
                cost=credits_cost,
                default=f"\n\nüí∞ –°–ø–∏—Å–∞–Ω–æ {credits_cost} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            )
            self.final_message += credits_text
            
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await self._safe_update_message(self.final_message)
        print(f"‚úÖ Streaming –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.update.effective_user.id}")
        
    async def _safe_update_message(self, text: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        if not self.current_message or not text.strip():
            return False
            
        try:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–æ –ª–∏–º–∏—Ç–∞ Telegram (4096 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(text) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —ç–º–æ–¥–∑–∏ –∏ –∫—Ä–µ–¥–∏—Ç–æ–≤
                text = text[:4000] + "..."
                
            await self.current_message.edit_text(text)
            return True
            
        except RetryAfter as e:
            # Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
            print(f"‚è≥ RetryAfter: –∂–¥–µ–º {e.retry_after} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(e.retry_after + 0.1)
            try:
                await self.current_message.edit_text(text)
                return True
            except Exception as retry_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ RetryAfter: {retry_error}")
                return False
                
        except BadRequest as e:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
            if "message is not modified" in str(e).lower():
                return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            print(f"‚ùå BadRequest –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
            return False
            
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

async def stream_openai_response(openai_client, messages, model, streaming_handler: StreamingResponse):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –≤ StreamingHandler.
    
    Args:
        openai_client: –ö–ª–∏–µ–Ω—Ç OpenAI
        messages: –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
        model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        streaming_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    
    Returns:
        str: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
    """
    try:
        print("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        stream = openai_client.chat.completions.create(
            model=model,
            messages=messages,
            stream=True,
            max_tokens=1000  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        )
        
        full_response = ""
        word_buffer = ""
        
        for chunk in stream:
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Å–æ–∫ —Ç–µ–∫—Å—Ç–∞
            if chunk.choices[0].delta.content is not None:
                chunk_text = chunk.choices[0].delta.content
                full_response += chunk_text
                word_buffer += chunk_text
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                if len(word_buffer.split()) >= 3 or chunk_text in ['.', '!', '?', '\n']:
                    await streaming_handler.update_message(word_buffer)
                    word_buffer = ""
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    await asyncio.sleep(0.1)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        if word_buffer:
            await streaming_handler.update_message(word_buffer, force_update=True)
            
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç ({len(full_response)} —Å–∏–º–≤–æ–ª–æ–≤)")
        return full_response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        try:
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º...")
            response = openai_client.chat.completions.create(
                model=model,
                messages=messages,
                max_tokens=1000
            )
            return response.choices[0].message.content
        except Exception as fallback_error:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ fallback —Ä–µ–∂–∏–º–µ: {fallback_error}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."